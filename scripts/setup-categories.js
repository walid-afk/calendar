const fetch = require('node-fetch');

// Configuration
const SHOPIFY_STORE_DOMAIN = process.env.SHOPIFY_STORE_DOMAIN;
const SHOPIFY_ADMIN_TOKEN = process.env.SHOPIFY_ADMIN_TOKEN;
const SHOPIFY_API_VERSION = process.env.SHOPIFY_API_VERSION || '2023-10';

const CATEGORY_IDS = [
  '666821853528',
  '666821886296', 
  '666822017368',
  '666822148440',
  '666822213976'
];

// Mapping des sous-cat√©gories par d√©faut
const SUBCATEGORIES = {
  'epilation': ['haute-frequence', 'ipl', 'cire'],
  'mains-pieds': ['mains', 'pieds'],
  'soins-corps': [],
  'soin-visage': [],
  'maquillage-teinture': ['maquillage', 'teinture']
};

// Zones communes
const ZONES = [
  'jambe', 'bras', 'aisselles', 'maillot', 'visage', 'dos', 'ventre', 
  'pieds', 'mains', 'ongles', 'sourcils', 'levres', 'yeux'
];

async function shopifyRequest(endpoint, method = 'GET', body = null) {
  const url = `https://${SHOPIFY_STORE_DOMAIN}/admin/api/${SHOPIFY_API_VERSION}/${endpoint}`;
  const options = {
    method,
    headers: {
      'X-Shopify-Access-Token': SHOPIFY_ADMIN_TOKEN,
      'Content-Type': 'application/json'
    }
  };
  
  if (body) {
    options.body = JSON.stringify(body);
  }
  
  const response = await fetch(url, options);
  if (!response.ok) {
    throw new Error(`Shopify API error: ${response.status} ${response.statusText}`);
  }
  
  return response.json();
}

async function resolveCollections() {
  console.log('üîç R√©solution des collections...');
  const collections = {};
  
  for (const id of CATEGORY_IDS) {
    try {
      const data = await shopifyRequest(`collections/${id}.json`);
      const collection = data.collection;
      
      collections[id] = {
        title: collection.title,
        handle: collection.handle,
        published: collection.published_at !== null,
        rules: collection.rules || []
      };
      
      console.log(`‚úÖ ${collection.title} (${collection.handle}) - ${collection.published_at ? 'Publi√©e' : 'Cach√©e'}`);
    } catch (error) {
      console.error(`‚ùå Erreur collection ${id}:`, error.message);
    }
  }
  
  return collections;
}

async function createMetafields() {
  console.log('üìù Cr√©ation des m√©tachamps...');
  
  // M√©tachamps produits
  const productMetafields = [
    {
      namespace: 'custom',
      key: 'subcategory',
      type: 'single_line_text_field',
      description: 'Sous-cat√©gorie du produit'
    },
    {
      namespace: 'custom', 
      key: 'area',
      type: 'list.single_line_text_field',
      description: 'Zones du corps concern√©es'
    },
    {
      namespace: 'custom',
      key: 'duration_minutes',
      type: 'number_integer',
      description: 'Dur√©e par d√©faut en minutes'
    },
    {
      namespace: 'custom',
      key: 'price_from',
      type: 'number_decimal',
      description: 'Prix √† partir de'
    },
    {
      namespace: 'custom',
      key: 'short_description',
      type: 'multi_line_text_field',
      description: 'Description courte'
    }
  ];
  
  // M√©tachamps variantes
  const variantMetafields = [
    {
      namespace: 'custom',
      key: 'duration_minutes',
      type: 'number_integer',
      description: 'Dur√©e sp√©cifique de la variante'
    },
    {
      namespace: 'custom',
      key: 'price_from',
      type: 'number_decimal',
      description: 'Prix sp√©cifique de la variante'
    },
    {
      namespace: 'custom',
      key: 'area',
      type: 'single_line_text_field',
      description: 'Zone sp√©cifique de la variante'
    }
  ];
  
  // Cr√©er les m√©tachamps produits
  for (const metafield of productMetafields) {
    try {
      await shopifyRequest('metafields.json', 'POST', {
        metafield: {
          ...metafield,
          owner_resource: 'product'
        }
      });
      console.log(`‚úÖ M√©tachamp produit: ${metafield.namespace}.${metafield.key}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è  M√©tachamp produit ${metafield.key} existe d√©j√† ou erreur:`, error.message);
    }
  }
  
  // Cr√©er les m√©tachamps variantes
  for (const metafield of variantMetafields) {
    try {
      await shopifyRequest('metafields.json', 'POST', {
        metafield: {
          ...metafield,
          owner_resource: 'variant'
        }
      });
      console.log(`‚úÖ M√©tachamp variante: ${metafield.namespace}.${metafield.key}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è  M√©tachamp variante ${metafield.key} existe d√©j√† ou erreur:`, error.message);
    }
  }
}

async function syncProductTags(collections) {
  console.log('üè∑Ô∏è  Synchronisation des tags produits...');
  
  for (const [collectionId, collection] of Object.entries(collections)) {
    try {
      // R√©cup√©rer tous les produits de la collection
      const productsData = await shopifyRequest(`collections/${collectionId}/products.json?limit=250`);
      const products = productsData.products || [];
      
      console.log(`üì¶ ${products.length} produits dans ${collection.title}`);
      
      for (const product of products) {
        const requiredTag = `cat:${collection.handle}`;
        const currentTags = product.tags ? product.tags.split(', ') : [];
        
        if (!currentTags.includes(requiredTag)) {
          const newTags = [...currentTags, requiredTag];
          
          try {
            await shopifyRequest(`products/${product.id}.json`, 'PUT', {
              product: {
                id: product.id,
                tags: newTags.join(', ')
              }
            });
            console.log(`‚úÖ Tag ajout√©: ${requiredTag} sur ${product.title}`);
          } catch (error) {
            console.error(`‚ùå Erreur tag ${product.title}:`, error.message);
          }
        }
      }
    } catch (error) {
      console.error(`‚ùå Erreur collection ${collection.title}:`, error.message);
    }
  }
}

async function createSubcollections(collections) {
  console.log('üìÅ Cr√©ation des sous-collections...');
  
  for (const [collectionId, collection] of Object.entries(collections)) {
    const subcategories = SUBCATEGORIES[collection.handle] || [];
    
    for (const subcategory of subcategories) {
      const subcollectionHandle = `${collection.handle}-${subcategory}`;
      const subcollectionTitle = `${collection.title} ‚Äî ${subcategory.charAt(0).toUpperCase() + subcategory.slice(1)}`;
      
      try {
        // V√©rifier si la sous-collection existe d√©j√†
        const existing = await shopifyRequest(`collections.json?handle=${subcollectionHandle}`);
        
        if (existing.collections.length === 0) {
          // Cr√©er la sous-collection
          await shopifyRequest('collections.json', 'POST', {
            collection: {
              title: subcollectionTitle,
              handle: subcollectionHandle,
              collection_type: 'smart',
              rules: [
                {
                  column: 'tag',
                  relation: 'equals',
                  condition: `cat:${collection.handle}`
                },
                {
                  column: 'tag', 
                  relation: 'equals',
                  condition: `sub:${subcategory}`
                }
              ]
            }
          });
          console.log(`‚úÖ Sous-collection cr√©√©e: ${subcollectionTitle}`);
        } else {
          console.log(`‚ö†Ô∏è  Sous-collection existe d√©j√†: ${subcollectionTitle}`);
        }
      } catch (error) {
        console.error(`‚ùå Erreur cr√©ation sous-collection ${subcollectionTitle}:`, error.message);
      }
    }
  }
}

async function generateDiagnostics(collections) {
  console.log('üìä G√©n√©ration du rapport de diagnostic...');
  
  const report = {
    categories: {},
    subcategories: {},
    issues: []
  };
  
  for (const [collectionId, collection] of Object.entries(collections)) {
    try {
      const productsData = await shopifyRequest(`collections/${collectionId}/products.json?limit=250`);
      const products = productsData.products || [];
      
      report.categories[collection.title] = {
        id: collectionId,
        handle: collection.handle,
        productCount: products.length,
        published: collection.published
      };
      
      // V√©rifier les tags
      for (const product of products) {
        const currentTags = product.tags ? product.tags.split(', ') : [];
        const requiredTag = `cat:${collection.handle}`;
        
        if (!currentTags.includes(requiredTag)) {
          report.issues.push({
            type: 'missing_tag',
            product: product.title,
            collection: collection.title,
            requiredTag
          });
        }
        
        // Compter les sous-cat√©gories
        const subTags = currentTags.filter(tag => tag.startsWith('sub:'));
        for (const subTag of subTags) {
          const subcategory = subTag.replace('sub:', '');
          if (!report.subcategories[subcategory]) {
            report.subcategories[subcategory] = 0;
          }
          report.subcategories[subcategory]++;
        }
      }
    } catch (error) {
      console.error(`‚ùå Erreur diagnostic ${collection.title}:`, error.message);
    }
  }
  
  console.log('\nüìã RAPPORT DE DIAGNOSTIC');
  console.log('========================');
  
  console.log('\nüè∑Ô∏è  CAT√âGORIES:');
  for (const [title, data] of Object.entries(report.categories)) {
    console.log(`  ${title}: ${data.productCount} produits (${data.published ? 'publi√©e' : 'cach√©e'})`);
  }
  
  console.log('\nüìÇ SOUS-CAT√âGORIES:');
  for (const [subcategory, count] of Object.entries(report.subcategories)) {
    console.log(`  ${subcategory}: ${count} produits`);
  }
  
  if (report.issues.length > 0) {
    console.log('\n‚ö†Ô∏è  PROBL√àMES D√âTECT√âS:');
    for (const issue of report.issues) {
      console.log(`  ${issue.type}: ${issue.product} (${issue.collection}) - Tag manquant: ${issue.requiredTag}`);
    }
  } else {
    console.log('\n‚úÖ Aucun probl√®me d√©tect√©');
  }
  
  return report;
}

async function main() {
  try {
    console.log('üöÄ Configuration des cat√©gories Shopify...\n');
    
    // A. R√©solution des collections
    const collections = await resolveCollections();
    
    // B. Cr√©ation des m√©tachamps
    await createMetafields();
    
    // C. Synchronisation des tags
    await syncProductTags(collections);
    
    // E. Cr√©ation des sous-collections
    await createSubcollections(collections);
    
    // I. G√©n√©ration du diagnostic
    const report = await generateDiagnostics(collections);
    
    console.log('\n‚úÖ Configuration termin√©e !');
    console.log('\nüìù Prochaines √©tapes manuelles:');
    console.log('  1. Configurer les filtres Search & Discovery dans l\'admin Shopify');
    console.log('  2. Mettre √† jour la navigation avec les nouvelles collections');
    console.log('  3. Int√©grer le filtrage dans l\'app RDV');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = {
  resolveCollections,
  createMetafields,
  syncProductTags,
  createSubcollections,
  generateDiagnostics
};
